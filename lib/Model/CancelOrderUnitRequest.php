<?php
/**
 * CancelOrderUnitRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Suppliers\Api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SMS API
 *
 * This documentation describes SMS API. To use this API you should have an api-key and api-username
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Suppliers\Api\Model;

use \ArrayAccess;

/**
 * CancelOrderUnitRequest Class Doc Comment
 *
 * @category    Class
 * @package     Suppliers\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CancelOrderUnitRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CancelOrderUnitRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_order_unit' => 'string',
        'reason' => 'string',
        'reason_description' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id_order_unit' => 'id_order_unit',
        'reason' => 'reason',
        'reason_description' => 'reason_description'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id_order_unit' => 'setIdOrderUnit',
        'reason' => 'setReason',
        'reason_description' => 'setReasonDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id_order_unit' => 'getIdOrderUnit',
        'reason' => 'getReason',
        'reason_description' => 'getReasonDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REASON_OTHER_REASON = 'other_reason';
    const REASON_BUYER_CANCELED = 'buyer_canceled';
    const REASON_CUSTOMER_RETURN = 'customer_return';
    const REASON_UNDELIVERABLE = 'undeliverable';
    const REASON_WRONG_ITEM_DATA = 'wrong_item_data';
    const REASON_CAN_NOT_FULFIL = 'can_not_fulfil';
    const REASON_WRONG_PRICE = 'wrong_price';
    const REASON_FRAUD = 'fraud';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_OTHER_REASON,
            self::REASON_BUYER_CANCELED,
            self::REASON_CUSTOMER_RETURN,
            self::REASON_UNDELIVERABLE,
            self::REASON_WRONG_ITEM_DATA,
            self::REASON_CAN_NOT_FULFIL,
            self::REASON_WRONG_PRICE,
            self::REASON_FRAUD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_order_unit'] = isset($data['id_order_unit']) ? $data['id_order_unit'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['reason_description'] = isset($data['reason_description']) ? $data['reason_description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id_order_unit'] === null) {
            $invalid_properties[] = "'id_order_unit' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalid_properties[] = "'reason' can't be null";
        }
        $allowed_values = ["other_reason", "buyer_canceled", "customer_return", "undeliverable", "wrong_item_data", "can_not_fulfil", "wrong_price", "fraud"];
        if (!in_array($this->container['reason'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'reason', must be one of 'other_reason', 'buyer_canceled', 'customer_return', 'undeliverable', 'wrong_item_data', 'can_not_fulfil', 'wrong_price', 'fraud'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_order_unit'] === null) {
            return false;
        }
        if ($this->container['reason'] === null) {
            return false;
        }
        $allowed_values = ["other_reason", "buyer_canceled", "customer_return", "undeliverable", "wrong_item_data", "can_not_fulfil", "wrong_price", "fraud"];
        if (!in_array($this->container['reason'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_order_unit
     * @return string
     */
    public function getIdOrderUnit()
    {
        return $this->container['id_order_unit'];
    }

    /**
     * Sets id_order_unit
     * @param string $id_order_unit ID of order unit to cancel
     * @return $this
     */
    public function setIdOrderUnit($id_order_unit)
    {
        $this->container['id_order_unit'] = $id_order_unit;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason Reason of cancellation
     * @return $this
     */
    public function setReason($reason)
    {
        $allowed_values = array('other_reason', 'buyer_canceled', 'customer_return', 'undeliverable', 'wrong_item_data', 'can_not_fulfil', 'wrong_price', 'fraud');
        if ((!in_array($reason, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'reason', must be one of 'other_reason', 'buyer_canceled', 'customer_return', 'undeliverable', 'wrong_item_data', 'can_not_fulfil', 'wrong_price', 'fraud'");
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reason_description
     * @return string
     */
    public function getReasonDescription()
    {
        return $this->container['reason_description'];
    }

    /**
     * Sets reason_description
     * @param string $reason_description Description of a cancellation reason
     * @return $this
     */
    public function setReasonDescription($reason_description)
    {
        $this->container['reason_description'] = $reason_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Suppliers\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Suppliers\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


