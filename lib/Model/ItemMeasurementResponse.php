<?php
/**
 * ItemMeasurementResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  SMS\Suppliers
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier API
 *
 * This documentation describes SMS Suppliers API. To be able use this API you should have an api-key and api-username
 *
 * OpenAPI spec version: 1.11.0
 * Contact: sms.tech@real-digital.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SMS\Suppliers\Model;

use \ArrayAccess;

/**
 * ItemMeasurementResponse Class Doc Comment
 *
 * @category    Class
 * @package     SMS\Suppliers
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemMeasurementResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemMeasurementResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gtin' => 'string',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'weight' => 'float',
        'units_per_pallet' => 'float',
        'units_per_layer' => 'float',
        'unit_layers_per_pallet' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gtin' => null,
        'length' => 'int64',
        'width' => 'int64',
        'height' => 'int64',
        'weight' => 'int64',
        'units_per_pallet' => 'int64',
        'units_per_layer' => 'int64',
        'unit_layers_per_pallet' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gtin' => 'gtin',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'weight' => 'weight',
        'units_per_pallet' => 'units_per_pallet',
        'units_per_layer' => 'units_per_layer',
        'unit_layers_per_pallet' => 'unit_layers_per_pallet'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gtin' => 'setGtin',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'weight' => 'setWeight',
        'units_per_pallet' => 'setUnitsPerPallet',
        'units_per_layer' => 'setUnitsPerLayer',
        'unit_layers_per_pallet' => 'setUnitLayersPerPallet'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gtin' => 'getGtin',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'weight' => 'getWeight',
        'units_per_pallet' => 'getUnitsPerPallet',
        'units_per_layer' => 'getUnitsPerLayer',
        'unit_layers_per_pallet' => 'getUnitLayersPerPallet'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['units_per_pallet'] = isset($data['units_per_pallet']) ? $data['units_per_pallet'] : null;
        $this->container['units_per_layer'] = isset($data['units_per_layer']) ? $data['units_per_layer'] : null;
        $this->container['unit_layers_per_pallet'] = isset($data['unit_layers_per_pallet']) ? $data['unit_layers_per_pallet'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['gtin'] === null) {
            $invalid_properties[] = "'gtin' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalid_properties[] = "'length' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalid_properties[] = "'width' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalid_properties[] = "'height' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalid_properties[] = "'weight' can't be null";
        }
        if ($this->container['units_per_pallet'] === null) {
            $invalid_properties[] = "'units_per_pallet' can't be null";
        }
        if ($this->container['units_per_layer'] === null) {
            $invalid_properties[] = "'units_per_layer' can't be null";
        }
        if ($this->container['unit_layers_per_pallet'] === null) {
            $invalid_properties[] = "'unit_layers_per_pallet' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['gtin'] === null) {
            return false;
        }
        if ($this->container['length'] === null) {
            return false;
        }
        if ($this->container['width'] === null) {
            return false;
        }
        if ($this->container['height'] === null) {
            return false;
        }
        if ($this->container['weight'] === null) {
            return false;
        }
        if ($this->container['units_per_pallet'] === null) {
            return false;
        }
        if ($this->container['units_per_layer'] === null) {
            return false;
        }
        if ($this->container['unit_layers_per_pallet'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets gtin
     * @return string
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     * @param string $gtin GTIN
     * @return $this
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets length
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param float $length Measurement Length
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param float $width Measurement Width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param float $height Measurement Height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets weight
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param float $weight Measurement Length
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets units_per_pallet
     * @return float
     */
    public function getUnitsPerPallet()
    {
        return $this->container['units_per_pallet'];
    }

    /**
     * Sets units_per_pallet
     * @param float $units_per_pallet Amount of units per pallet
     * @return $this
     */
    public function setUnitsPerPallet($units_per_pallet)
    {
        $this->container['units_per_pallet'] = $units_per_pallet;

        return $this;
    }

    /**
     * Gets units_per_layer
     * @return float
     */
    public function getUnitsPerLayer()
    {
        return $this->container['units_per_layer'];
    }

    /**
     * Sets units_per_layer
     * @param float $units_per_layer Amount of units per layer
     * @return $this
     */
    public function setUnitsPerLayer($units_per_layer)
    {
        $this->container['units_per_layer'] = $units_per_layer;

        return $this;
    }

    /**
     * Gets unit_layers_per_pallet
     * @return float
     */
    public function getUnitLayersPerPallet()
    {
        return $this->container['unit_layers_per_pallet'];
    }

    /**
     * Sets unit_layers_per_pallet
     * @param float $unit_layers_per_pallet Amount of unit layers per pallet
     * @return $this
     */
    public function setUnitLayersPerPallet($unit_layers_per_pallet)
    {
        $this->container['unit_layers_per_pallet'] = $unit_layers_per_pallet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SMS\Suppliers\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SMS\Suppliers\ObjectSerializer::sanitizeForSerialization($this));
    }
}


