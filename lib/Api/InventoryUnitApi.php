<?php
/**
 * InventoryUnitApi
 * PHP version 5
 *
 * @category Class
 * @package  Suppliers\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier API SDK
 *
 * This documentation describes SMS API. To use this API you should have an api-key and api-username
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Suppliers\Api\Api;

use \Suppliers\Api\ApiClient;
use \Suppliers\Api\ApiException;
use \Suppliers\Api\Configuration;
use \Suppliers\Api\ObjectSerializer;

/**
 * InventoryUnitApi Class Doc Comment
 *
 * @category Class
 * @package  Suppliers\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryUnitApi
{
    /**
     * API Client
     *
     * @var \Suppliers\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Suppliers\Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Suppliers\Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Suppliers\Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Suppliers\Api\ApiClient $apiClient set the API client
     *
     * @return InventoryUnitApi
     */
    public function setApiClient(\Suppliers\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteInventoryUnitByID
     *
     * Delete inventory unit by ID
     *
     * @param string $id ID of inventory unit to delete (required)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return void
     */
    public function deleteInventoryUnitByID($id)
    {
        list($response) = $this->deleteInventoryUnitByIDWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteInventoryUnitByIDWithHttpInfo
     *
     * Delete inventory unit by ID
     *
     * @param string $id ID of inventory unit to delete (required)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInventoryUnitByIDWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteInventoryUnitByID');
        }
        // parse inputs
        $resourcePath = "/inventory-units/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-username');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-username'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/inventory-units/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getInventoryUnitByID
     *
     * Find inventory unit by ID
     *
     * @param string $id ID of inventory unit to return (required)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return \Suppliers\Api\Model\GetInventoryUnitsByInventoryIDResponse
     */
    public function getInventoryUnitByID($id)
    {
        list($response) = $this->getInventoryUnitByIDWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getInventoryUnitByIDWithHttpInfo
     *
     * Find inventory unit by ID
     *
     * @param string $id ID of inventory unit to return (required)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return array of \Suppliers\Api\Model\GetInventoryUnitsByInventoryIDResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryUnitByIDWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getInventoryUnitByID');
        }
        // parse inputs
        $resourcePath = "/inventory-units/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-username');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-username'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Suppliers\Api\Model\GetInventoryUnitsByInventoryIDResponse',
                '/inventory-units/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Suppliers\Api\Model\GetInventoryUnitsByInventoryIDResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Suppliers\Api\Model\GetInventoryUnitsByInventoryIDResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateInventoryUnit
     *
     * Update inventory unit
     *
     * @param string $id ID of inventory (required)
     * @param \Suppliers\Api\Model\UpdateInventoryUnitRequest $body Inventory unit object that needs to be updated (optional)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return void
     */
    public function updateInventoryUnit($id, $body = null)
    {
        list($response) = $this->updateInventoryUnitWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateInventoryUnitWithHttpInfo
     *
     * Update inventory unit
     *
     * @param string $id ID of inventory (required)
     * @param \Suppliers\Api\Model\UpdateInventoryUnitRequest $body Inventory unit object that needs to be updated (optional)
     * @throws \Suppliers\Api\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInventoryUnitWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateInventoryUnit');
        }
        // parse inputs
        $resourcePath = "/inventory-units/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-username');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-username'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/inventory-units/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Suppliers\Api\Model\BadRequestResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
